#!/bin/bash

#--- Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'
#---

ProgName=$(basename $0)
CPP_EXTENSIONS="cpp|cc|cxx|hpp|h"
SYMENGINE_REPO="https://github.com/symengine/symengine.git"
SYMENGINE_COMMIT="5c47488c5d1df382d36959b0dad14916dd745f54"
GYM_REPO="https://github.com/ianruh/gym.git"
CC=clang
CXX=clang++
SYMEGINE_BUILD_TYPE=Release

sub_help(){
    echo "Usage: $ProgName <subcommand> [options]\n"
    echo "Subcommands:"
    echo "    build                 Build the library"
    echo "    build-debug           Build the library"
    echo "    clean                 Clean all build artifacts"
    echo "    clean-all             Clean all build artifacts and delete build/"
    echo "    cpplint               Lint all of the c++ code using cpplint"
    echo "    copyright             Place the copyright at the top of all source files"
    echo "    format                Format all code using flake8 and clang-format"
    echo "    format-cpp            Format c/c++ code using clang-format"
    echo "    todo                  Search todos in the code"
    echo "    test                  Run all C++ and python tests"
    echo "    install-kernel        Install the jupyter kernel"
    echo "    bootstrap             Build the dependencies that need to be built from source"
    echo "    bootstrap-debug       Build the dependencies that need to be built from source"
    echo "                          in debug mode"
    echo "    bootstrap-examples    Build the dependencies needed for the examples"
    echo ""
    echo "For help with each subcommand run:"
    echo "$ProgName <subcommand> -h|--help"
    echo ""
}

# Get a section title string
#
# Args:
#   $1: Section name
util_section_header() {
    printf "############### $1 ################\n"
}

util_check_conda() {
    if [[ -z "$CONDA_PREFIX" ]]; then
        printf "${RED}\$CONDA_PREFIX environment variable not set. Do you need to activate the environment?${NC}\n"
        exit 1
    fi
}

sub_bootstrap-debug() {
    SYMEGINE_BUILD_TYPE=Debug
    sub_bootstrap
}

sub_bootstrap() {
    original_wd=$(pwd)
    cd "$(git rev-parse --show-toplevel)"

    util_check_conda
    util_section_header "Building and Installing SymEngine"
    printf "Using install prefix $CONDA_PREFIX\n"

    # Make a third party directory is one doesn't exist
    if ! [[ -d third_party/ ]]; then
        mkdir third_party/
    fi

    cd third_party/

    # Clone symengine if not already cloned
    if ! [[ -d symengine ]]; then
        git clone "$SYMENGINE_REPO" symengine
    else
        # Just fetch origin if already cloned
        cd symengine
        git fetch origin
        cd ../
    fi

    cd symengine

    # Checkout our required commit
    git checkout "$SYMENGINE_COMMIT"

    # Make a build dir if there isn't already one
    if ! [[ -d build/ ]]; then
        mkdir build
    fi

    cd build/

    # Run cmake with our given prefixes
    cmake \
        -D CMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
        -D CMAKE_C_COMPILER=$CC \
        -D CMAKE_CXX_COMPILER=$CXX \
        -D CMAKE_INSTALL_LIBDIR=${CONDA_PREFIX}/lib \
        -DBUILD_TESTS=OFF \
        -DBUILD_BENCHMARKS=OFF \
        -DBUILD_SHARED_LIBS=ON \
        -D CMAKE_BUILD_TYPE=$SYMEGINE_BUILD_TYPE \
        ..

    make -j8
    make install

    cd "$original_wd"
}

sub_bootstrap-examples() {
    original_wd=$(pwd)
    cd "$(git rev-parse --show-toplevel)"

    util_check_conda
    util_section_header "Installing OpenAI Gym"
 
    # Make a third party directory is one doesn't exist
    if ! [[ -d third_party/ ]]; then
        mkdir third_party/
    fi
    cd third_party/
    
    # Delete gym if it is already here and re-clone it
    if [[ -d gym/ ]]; then
        rm -rf gym/
    fi
    git clone $GYM_REPO gym
    cd gym/
    python3 -m pip install -e .

    cd "$original_wd"
}

sub_install-kernel() {
    original_wd=$(pwd)
    cd "$(git rev-parse --show-toplevel)"

    util_check_conda
    jupyter kernelspec install $CONDA_PREFIX/share/jupyter/kernels/xcpp17 \
        --user --name=cppmpc-cpp17

    cd "$original_wd"
}


# Run all of the python and C++ tests.
#
# Args: None
sub_test() {
    
    util_check_conda
    util_section_header "Building"
    # Build first
    sub_build-debug
 
    # Stop if the build failed
    if [[ "$?" != "0" ]]; then
        return 1;
    fi

    # Then do testing stuffs
    original_wd=$(pwd)

    cd "$(git rev-parse --show-toplevel)"

    util_section_header "C++ Tests"
    cd ./build/
    ctest

    cd "$original_wd"
}

sub_todo() { 
    original_wd=$(pwd)

    cd "$(git rev-parse --show-toplevel)"

    # If the terminal is too narrow, then put the preview below
    width=$(tput cols)
    preview_loc='right:70%'
    if (( width < 100 )); then
        preview_loc='down:50%'
    fi

	file_line=$(rg -g '!utils' \
        -g '!cppmpc_py/cppmpc.py' \
        -g '!cppmpc_py/cppmpcPYTHON_wrap.cxx' \
        -n \
        "TODO" | \
        fzf --sort --preview="util_search_preview {1} {2} {q}" \
			--query "$query" \
			--bind "tab:down,btab:up" \
            --preview-window "wrap:$preview_loc" \
            --height=30% \
            --min-height=30 \
            --ansi \
            -d ':' \
            --nth 3,4 \
            --with-nth 1,2,3,4 \
            --reverse)
    
    # Stop if they hit Ctrl-C
    if [[ "$?" != "0" ]]; then
        return;
    fi
    
    file_path=$(echo $file_line | cut -d : -f 1)
    line_number=$(echo $file_line | cut -d : -f 2)

    echo "$file_path:$line_number"

    cd "$original_wd"
}

# Args
#   $1: The file path
#   $2: The line number
#   $3: The query string
util_search_preview() {
    # Handle no selection that matches query
    if [[ "$1" == "" ]]; then
        return
    fi

    util_bat_preview_line "$1" $2
}
export -f util_search_preview

# Preview line in file in bat
# Args:
#   $1: The file path
#   $2: The line number
util_bat_preview_line() {
    bg_yellow="[43m"
    ansi_reset="[49m"
    num_context=7
    first_line=$(($2 - $num_context))
    if (( $first_line < 0 )); then
        first_line=0
        num_context=$(($num_context + $num_context - $2))
    fi

    batcat -n --color=always \
        --line-range $first_line:$(($first_line + $num_context + $num_context)) \
        -H $2 \
        --wrap character \
        --terminal-width $(($(tput cols) - 4)) \
        "$1"
}
export -f util_bat_preview_line

sub_copyright() {
    original_wd=$(pwd)

    cd "$(git rev-parse --show-toplevel)"

    for i in $(fd ".*\.($CPP_EXTENSIONS)" ./src/ ./include/ ./tests/); do
        if ! grep -q Copyright "$i"; then
            cat ./copyright.txt "$i" > "$i.new"
            mv "$i.new" "$i"
        fi
    done

    cd "$original_wd"
}

sub_cpplint() { 
    original_wd=$(pwd)

    cd "$(git rev-parse --show-toplevel)"

    fd ".*\.($CPP_EXTENSIONS)" ./src/ ./include/ ./tests/ | xargs cpplint

    result="$?"

    cd "$original_wd"

    return $result
}

sub_build() { 
    original_wd=$(pwd)
    cd "$(git rev-parse --show-toplevel)"

    util_check_conda

    if ! [ -d ./build/ ]; then
        mkdir ./build/
    fi
    cd ./build/

    cmake \
        -D CMAKE_BUILD_TYPE=Release \
        -D CMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
        -D CMAKE_C_COMPILER=$CC \
        -D CMAKE_CXX_COMPILER=$CXX \
        -D CMAKE_INSTALL_LIBDIR=${CONDA_PREFIX}/lib \
        ..
    
    # Stop if the build failed
    if [[ "$?" != "0" ]]; then
        cd "$original_wd"
        return 1;
    fi

    make -j8

    # Stop if the build failed
    if [[ "$?" != "0" ]]; then
        cd "$original_wd"
        return 1;
    fi

    cd "$original_wd"
}

# Build in debug mode
sub_build-debug() { 
    original_wd=$(pwd)
    cd "$(git rev-parse --show-toplevel)"

    util_check_conda

    if ! [ -d ./build/ ]; then
        mkdir ./build/
    fi
    cd ./build/

    cmake \
        -D CMAKE_BUILD_TYPE=Debug \
        -D CMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
        -D CMAKE_C_COMPILER=$CC \
        -D CMAKE_CXX_COMPILER=$CXX \
        -D CMAKE_INSTALL_LIBDIR=${CONDA_PREFIX}/lib \
        ..
    
    # Stop if the build failed
    if [[ "$?" != "0" ]]; then
        cd "$original_wd"
        return 1;
    fi

    make -j8

    # Stop if the build failed
    if [[ "$?" != "0" ]]; then
        cd "$original_wd"
        return 1;
    fi

    cd "$original_wd"
}

sub_clean() { 
    original_wd=$(pwd)

    cd "$(git rev-parse --show-toplevel)"

    if [[ -d build/ ]]; then
        cd ./build/
        if [ -f Makefile ]; then
            make clean
        fi
    fi

    cd "$original_wd"
}

sub_clean-all() { 
    original_wd=$(pwd)

    cd "$(git rev-parse --show-toplevel)"

    if [ -d ./build/ ]; then
        rm -rf ./build/
    fi

    if [ -d third_party ]; then
        rm -rf third_party/ 
    fi

    cd "$original_wd"
}

sub_format() {
    sub_format-cpp
}
  
sub_format-cpp(){
    original_wd=$(pwd)

    cd "$(git rev-parse --show-toplevel)"
    fd ".*\.($CPP_EXTENSIONS)" ./include/ ./src/ ./tests/ | \
        xargs clang-format -i

    cd "$original_wd"
}
 
subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${subcommand} $@
        ret_val=$?
        if [ $ret_val = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$ProgName --help' for a list of known subcommands." >&2
            exit 1
        elif [ $ret_val = 1 ]; then
            exit 1
        fi
        ;;
esac
